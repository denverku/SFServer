using Shared;
using Shared.Network;
using Shared.Util;
using Shared.Util.Log.Factories;
using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Text;

namespace Session.Session
{
    internal class SSesion : Shared.Session.Session
    {
        // User::PacketParsing
        public SSesion(Server server, TcpClient client) : base(server, client)
        {
            //_kickTask = new KickInactiveSession(this, server.Scheduler);
            //server.Scheduler.AddTask(_kickTask, 1, true);
            SendRaw(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x31, 0x00 });
        }

        protected override void OnRun(Packet packet)
        {
            try
            {
                
                
               LogFactory.GetLog(server.Name).LogInfo($"dumping packet proto {packet.protocolID - 50}.");
                packet.Dump();
                //LogFactory.GetLog(server.Name).LogInfo($"dumping packet test {packet.ReadShort()}.");
                //LogFactory.GetLog(server.Name).LogInfo($"dumping packet test {packet.ReadString(9)}.");
                //LogFactory.GetLog(server.Name).LogInfo($"\n{NetworkUtil.DumpPacket(buffer, length)}");

                switch (packet.protocolID - 50)
                {
                    case 0: // OnSFLoginReq
                        LogFactory.GetLog(server.Name).LogInfo($"Client Version {packet.ReadShort()}.");
                        /*byte[] ba = new byte[] { 0x28, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0xf2,
0x18, 0x57, 0xca, 0xc0, 0x96, 0x18, 0x7d, 0x38,
0xc0, 0x72, 0xd5, 0xbb, 0x4f, 0xf9, 0x44, 0x1c,
0x1f, 0x21, 0x5d, 0xc5, 0x5b, 0xf6, 0x64, 0xde,
0x00, 0xf4, 0x35, 0x17, 0x63, 0xf0, 0xcf, 0x0c,
0x9b, 0xf4, 0x83, 0xd0, 0x74, 0x90 };*/
                        SendRaw(new byte[] {0x03, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x01, 0x00});
                        break;
                    case 2: // OnSFServerListReq
                            //LogFactory.GetLog(server.Name).LogInfo($"test {packet.ReadShort()}.");
                            //LogFactory.GetLog(server.Name).LogInfo($"LoginServerID {packet.ReadShort()}.");

                        /*Packet serverlist = new Packet(53);
                        serverlist.WriteInt(0);
                        serverlist.WriteInt(0);*/

                        /*SendRaw(new byte[] { 0x45, 0x00, 0x00, 0x00, 0x35, 0x00, 0x4e, 0xa2,
0x13, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x2b,
0x01, 0xd0, 0x07, 0x42, 0x75, 0x6c, 0x6c, 0x53,
0x46, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
0x20, 0x23, 0x31, 0x00, 0x00, 0x04, 0x00, 0x02,
0x00, 0xc8, 0x00, 0x42, 0x75, 0x6c, 0x6c, 0x53,
0x46, 0x20, 0x53, 0x45, 0x41, 0x00, 0x00, 0x05,
0x00, 0x02, 0x00, 0xc8, 0x00, 0x42, 0x75, 0x6c,
0x6c, 0x53, 0x46, 0x20, 0x45, 0x75, 0x72, 0x6f,
0x70, 0x65, 0x00 });*/
                        //SendRaw(new byte[] { 0x19, 0x00, 0x00, 0x00, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00  });
                        SendRaw(new byte[] {0x73, 0x00, 0x00, 0x00, 0x35, 0x00, 0x1b, 0xc6,
0x34, 0x03, 0x05, 0x00, 0x02, 0x01, 0x00, 0x00,
0x00, 0xb8, 0x0b, 0x43, 0x6c, 0x61, 0x6e, 0x20,
0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00,
0x03, 0x00, 0xc0, 0x00, 0xb8, 0x0b, 0x53, 0x46,
0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
0x31, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0xb8,
0x0b, 0x53, 0x46, 0x5f, 0x53, 0x65, 0x72, 0x76,
0x65, 0x72, 0x5f, 0x32, 0x00, 0x00, 0x05, 0x00,
0x00, 0x00, 0xb8, 0x0b, 0x53, 0x46, 0x5f, 0x53,
0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x33, 0x00,
0x03, 0x0f, 0x00, 0x00, 0x00, 0xb8, 0x0b, 0x4f,
0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x43, 0x6f,
0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
0x00});
                        break;
                    case 4: // OnSFServerIPReq
                        //decryption = hexadecimal -> decimal -> ascii
                        //encryption = ascii -> decimal -> hexadecimal  

                        //LogFactory.GetLog(server.Name).LogInfo($"ServerId {packet.ReadShort()}.");
                        //LogFactory.GetLog(server.Name).LogInfo($"LoginServerID {packet.ReadShort()}.");
                        // 127.0.0.1
                        // Packet ss = new Packet(new byte[] { 0x0a, 0x00, 0x00, 0x00, 0x37, 0x00, 0x31, 0x50, 0x72, 0xe4, 0x81, 0x99, 0x26, 0x04, 0x03, 0x8d });
                        Packet ss = new Packet(new byte[] { 0x0a, 0x00, 0x00, 0x00, 0x37, 0x00, 0x31, 0x50, 0x72, 0xe4, 0x81, 0x99, 0x26, 0x04, 0x03, 0x8d });
                        SendPacket(ss);
                        //SendRaw(new byte[] { 0x0d, 0x00, 0x00, 0x00, 0x37, 0x00, 0x36, 0x53, 0x6b, 0xf3, 0x81, 0x99, 0x24, 0x1a, 0x01, 0xa3, 0x04, 0x8e, 0x1f });
                        break;
                    case 6: // OnSFReloginReq

                        break;
                    case 8: // close reuest

                        break;
                    case 10: // OnSFSCGalaxyServerReq
                        
                       
                        break;
                    case 12: // OnSFTESTServerIPReq

                        break;
                    case 14: // OnSFSetVTableReq

                        break;
                    case 16: // OnSFCheckVTableReq also

                        break;
                }

               
                
                base.OnRun(packet);
            }
            catch (Exception e)
            {
                LogFactory.GetLog(server.Name).LogFatal(e);
            }
        }

        

        protected override void HandlePacket(Packet packet)
        {


            base.HandlePacket(packet);
        }





        public override void OnFinishPacketSent(Packet packet)
        {


            // _kickTask.Inactive = 0;
            base.OnFinishPacketSent(packet);
        }
    }
}
