using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using Game.Network;
using Newtonsoft.Json;
using Shared;
using Shared.Model;
using Shared.Network;
using Shared.Session;
using Shared.Util;
using Shared.Util.Log.Factories;

namespace Game.Session
{
    public class GameSession : Shared.Session.Session
    {
        //User::PacketParse
        private User _user;
        //private FeverData _fever = new FeverData();
        

        List<BaseNetwork> handler = new List<BaseNetwork>();
        public GameSession(Server server, TcpClient client) : base(server, client)
        {
            
            handler.Add(new OnSFConnectionReq());
            handler.Add(new OnSFCheckOverlapNickNameReq());
            handler.Add(new OnSFGetDBDataReq());

            // channel
            handler.Add(new OnSFChannelListReq());
            handler.Add(new OnSFEnterChannelReq());
            handler.Add(new OnSFUserListInChannelReq());

            // room
            handler.Add(new OnSFCreateRoomReq());
            handler.Add(new OnSFUserListInRoomReq());
            handler.Add(new OnSFChangeGameMapReq());
            handler.Add(new OnSFChangeVictoryConditionReq());

            handler.Add(new OnSFGameStartReq());

            // shop
            handler.Add(new OnSFBuyArmsReq());

            /*handler.Add(new OnSFSendUserDataReq());
            
            handler.Add(new OnSFUDPDataStoreReq());

            handler.Add(new OnSFCheckBalanceReq());

            
            
            
            handler.Add(new OnSFLeaveChannelReq());

            
            
            handler.Add(new OnSFLocationReq());
            handler.Add(new OnSFUserLocationReq());
            
            handler.Add(new OnSFChangeCountryReq());
            handler.Add(new OnSFChangeThirdViewReq());
            handler.Add(new OnSFChangeEnemyViewReq());
            handler.Add(new OnSFChangeGameTypeReq());
            handler.Add(new OnSFChangeIntrudeReq());

            handler.Add(new OnSFGameGuardAuthReq());
            handler.Add(new OnSFEnterForceSettingReq());

            handler.Add(new OnSFRoomListReq());
            handler.Add(new OnSFRoomInfoInChannelReq());

            handler.Add(new OnSFUpdateNewUserFlagReq());
            handler.Add(new OnSFSaveBasicCharacterInDBReq());
            handler.Add(new OnSFSaveSystemSpecReq());
            handler.Add(new OnSFSaveNickNameReq());
            

            handler.Add(new OnSFBuyCharacterReq());
            

            handler.Add(new OnSFCharacterInfoReq());
            handler.Add(new OnSFChatInChannelAllReq());

            handler.Add(new OnSFEndClientLoadingReq());
            handler.Add(new OnSFExitGameServerReq());
            handler.Add(new OnSFExitGameReq());*/
        }

        protected override void OnRun(Packet packet)
        {
            try
            {
                LogFactory.GetLog(server.Name).LogInfo($"dumping packet protocolID {packet.protocolID}.");
                packet.Dump();
                
                foreach (BaseNetwork bn in handler)
                {
                    if(bn.ProtocolId() == packet.protocolID)
                    {
                        bn.Handle(packet, this);
                    }
                }
                
                switch (packet.protocolID)
                {
                    
                   
                    case 6933: // Location of user in room
                        SendRaw(new byte[] { 0x44, 0x46, 0x04, 0x00, 0x00, 0x00, 0x16, 0x1b, 0x00, 0x2d, 0x00, 0x0f  });
                        break;
                    


                    case 7439:
                        SendRaw(new byte[] {0x44, 0x46, 0x28, 0x00, 0x00, 0x00, 0x6c, 0x20,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
0x30, 0x32, 0x30, 0x2d, 0x30, 0x36, 0x2d, 0x32,
0x36, 0x20, 0x31, 0x35, 0x3a, 0x35, 0x32, 0x3a,
0x31, 0x38, 0x00, 0x02, 0x44, 0x46, 0x09, 0x00});
                        SendRaw(new byte[] {0x44, 0x46, 0x09, 0x00, 0x00, 0x00, 0x40, 0x1c,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x44, 0x46, 0x21, 0x00, 0x00, 0x00, 0x72,
0x1c, 0x7d, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00,
0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x7f, 0x01,
0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x00,
0x7d, 0x01, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00,
0x00, 0x00, 0x44, 0x46, 0x04, 0x00, 0x00, 0x00,
0x13, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x44, 0x46,
0x31, 0x06, 0x00, 0x00, 0x93, 0x1c, 0x3e, 0x00,
0x00, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x76, 0xdf,
0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53,
0x5f, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x82,
0xdf, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f,
0x53, 0x5f, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00,
0x88, 0x0a, 0x00, 0x00, 0x42, 0x5a, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56,
0x4f, 0x53, 0x5f, 0x00, 0x00, 0x08, 0x01, 0x00,
0x00, 0x88, 0x0a, 0x00, 0x00, 0x42, 0x5a, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45,
0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0x07, 0x01,
0x00, 0x00, 0x88, 0x0a, 0x00, 0x00, 0x42, 0x5a,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f,
0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0x04,
0x01, 0x00, 0x00, 0x88, 0x0a, 0x00, 0x00, 0x42,
0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00,
0xf6, 0x00, 0x00, 0x00, 0x24, 0xdf, 0x03, 0x00,
0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00,
0x00, 0xed, 0x00, 0x00, 0x00, 0xcb, 0xdf, 0x03,
0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f,
0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0xc9, 0xdf,
0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53,
0x5f, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x88,
0x0a, 0x00, 0x00, 0x42, 0x5a, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f,
0x53, 0x5f, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00,
0x9f, 0xd5, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56,
0x4f, 0x53, 0x5f, 0x00, 0x00, 0xf4, 0x00, 0x00,
0x00, 0x3b, 0xdf, 0x03, 0x00, 0x45, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45,
0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0xfa, 0x00,
0x00, 0x00, 0x75, 0xdf, 0x03, 0x00, 0x45, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f,
0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0xf1,
0x00, 0x00, 0x00, 0x7a, 0xd5, 0x03, 0x00, 0x45,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00,
0x03, 0x01, 0x00, 0x00, 0x88, 0x0a, 0x00, 0x00,
0x42, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00,
0x00, 0xee, 0x00, 0x00, 0x00, 0xb6, 0xdf, 0x03,
0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f,
0x00, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x31, 0xdf,
0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53,
0x5f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xb9,
0xd5, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f,
0x53, 0x5f, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00,
0x30, 0xdf, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56,
0x4f, 0x53, 0x5f, 0x00, 0x00, 0x01, 0x01, 0x00,
0x00, 0x55, 0xdf, 0x03, 0x00, 0x45, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45,
0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0xe7, 0x00,
0x00, 0x00, 0xc8, 0xdf, 0x03, 0x00, 0x45, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f,
0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0x45,
0x00, 0x00, 0x00, 0x64, 0x43, 0x00, 0x00, 0x41,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00,
0x00, 0xfd, 0x00, 0x00, 0x00, 0xcf, 0xd5, 0x03,
0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f,
0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x23, 0xdf,
0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53,
0x5f, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x88,
0x0a, 0x00, 0x00, 0x42, 0x5a, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f,
0x53, 0x5f, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,
0x88, 0x0a, 0x00, 0x00, 0x42, 0x5a, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56,
0x4f, 0x53, 0x5f, 0x00, 0x00, 0xf0, 0x00, 0x00,
0x00, 0xa5, 0xdf, 0x03, 0x00, 0x45, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45,
0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0x47, 0x00,
0x00, 0x00, 0x64, 0x43, 0x00, 0x00, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00,
0x48, 0x00, 0x00, 0x00, 0x64, 0x43, 0x00, 0x00,
0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d,
0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x5d, 0xdf,
0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53,
0x5f, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x64,
0x43, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c,
0x69, 0x65, 0x2d, 0x00, 0x00, 0x44, 0x00, 0x00,
0x00, 0x39, 0x36, 0x00, 0x00, 0x41, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61,
0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x0b,
0x00, 0x00, 0x00, 0x16, 0xe1, 0x00, 0x00, 0x41,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00,
0x00, 0x97, 0x00, 0x00, 0x00, 0x55, 0xdf, 0x03,
0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65,
0x2d, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x32,
0xdf, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5f, 0x45, 0x56, 0x4f,
0x53, 0x5f, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00,
0x7f, 0xd4, 0x03, 0x00, 0x45, 0x06, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c,
0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x7a, 0x00,
0x00, 0x00, 0x30, 0x5b, 0x01, 0x00, 0x41, 0x1e,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00,
0xb8, 0x00, 0x00, 0x00, 0xaa, 0xdf, 0x03, 0x00,
0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d,
0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0xc6, 0x6b,
0x01, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69,
0x65, 0x2d, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00,
0xd0, 0xac, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c,
0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x16, 0x00,
0x00, 0x00, 0x32, 0x9a, 0x00, 0x00, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00,
0x79, 0x00, 0x00, 0x00, 0x23, 0x26, 0x00, 0x00,
0x41, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d,
0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0xa0, 0x15,
0x00, 0x00, 0x41, 0x1e, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69,
0x65, 0x2d, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00,
0x1f, 0x9e, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c,
0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x4d, 0x00,
0x00, 0x00, 0xe4, 0xe1, 0x00, 0x00, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00,
0xef, 0x00, 0x00, 0x00, 0xb7, 0xdf, 0x03, 0x00,
0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x5f, 0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00,
0x00, 0x23, 0x00, 0x00, 0x00, 0x42, 0xa9, 0x00,
0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65,
0x2d, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0xb2,
0x70, 0x01, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c,
0x69, 0x65, 0x2d, 0x00, 0x00, 0x56, 0x00, 0x00,
0x00, 0x29, 0x9e, 0x00, 0x00, 0x41, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61,
0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x55,
0x00, 0x00, 0x00, 0x29, 0x9e, 0x00, 0x00, 0x41,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00,
0x00, 0x65, 0x00, 0x00, 0x00, 0x56, 0xa9, 0x00,
0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65,
0x2d, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0xa8,
0xdf, 0x03, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c});

                        SendRaw(new byte[] {0x69, 0x65, 0x2d, 0x00, 0x00, 0x74, 0x00, 0x00,
0x00, 0x0e, 0x4c, 0x00, 0x00, 0x41, 0x1e, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61,
0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x90,
0x00, 0x00, 0x00, 0x76, 0xdf, 0x03, 0x00, 0x45,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00,
0x00, 0x20, 0x00, 0x00, 0x00, 0x09, 0xa0, 0x00,
0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65,
0x2d, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0xb9,
0x11, 0x01, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c,
0x69, 0x65, 0x2d, 0x00, 0x00, 0xad, 0x00, 0x00,
0x00, 0xa9, 0xdf, 0x03, 0x00, 0x45, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61,
0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00, 0x00, 0x3f,
0x00, 0x00, 0x00, 0x0c, 0xe1, 0x00, 0x00, 0x41,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x2d, 0x00,
0x00, 0x08, 0x00, 0x00, 0x00, 0xb2, 0x6b, 0x01,
0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c, 0x69, 0x65,
0x2d, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xc6,
0xac, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6c, 0x6c,
0x69, 0x65, 0x2d, 0x00, 0x00, 0xd2, 0x00, 0x00,
0x00, 0x6a, 0xda, 0x03, 0x00, 0x45, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x45,
0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0xff, 0x00,
0x00, 0x00, 0x52, 0xdf, 0x03, 0x00, 0x45, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f,
0x45, 0x56, 0x4f, 0x53, 0x5f, 0x00, 0x00, 0x44,
0x46, 0x49, 0x00, 0x00, 0x00, 0x6e, 0x1c, 0x0e,
0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0e,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
                        break;
                    
                    case 7055: 
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x90, 0x1b });
                        break;
                   
                    
                    case 24294: 
                        SendRaw(new byte[] {0x44, 0x46, 0x1a, 0x00, 0x00, 0x00, 0x21, 0x20,
0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x03,
0x53, 0x53, 0x03, 0x00, 0x05, 0x00, 0x54, 0x53,
0x08, 0x00, 0x0a, 0x00, 0x41, 0x41, 0x53, 0x00,
0x96, 0x00}); 
                        break;
                    

                    
                    case 7150: // OnSFConnectionReq
                        /*SendRaw(new byte[] { 0x44, 0x46, 0x7d, 0x02, 0x00, 0x00, 0xef, 0x1b,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00,
0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x5f, 0x01,
0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x02, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x56, 0x01,
0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x03, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x87, 0x00,
0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x04, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x4d, 0x87, 0x00,
0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x05, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0xdc, 0x7c, 0x00,
0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x06, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0xd9, 0x03,
0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x0c, 0x59, 0x00, 0x00, 0x07, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x59, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x08, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x0b, 0x01,
0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x09, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x77, 0x0b, 0x01,
0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x0a, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x73, 0x0b, 0x01,
0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x8c, 0xb6, 0x03, 0x00, 0x0b, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x9d, 0xb6, 0x03,
0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x7c, 0xfb, 0x00, 0x00, 0x0c, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x9d, 0xb6, 0x03,
0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x77, 0xfb, 0x00, 0x00, 0x0d, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x72, 0xfb, 0x00,
0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x0e, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0xd9, 0x03,
0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x6a, 0x8d, 0x00, 0x00, 0x0f, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x6e, 0x8d, 0x00,
0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x10, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x9d, 0xb6, 0x03,
0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x78, 0x6c, 0x00, 0x00, 0x11, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x3b, 0x6c, 0x00,
0x00, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x12, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x6c, 0x00,
0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x13, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0xa7, 0x83, 0x00,
0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9d, 0xb6, 0x03, 0x00, 0x14, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0xd9, 0x03,
0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0xff, 0x9d, 0x00, 0x00, 0x15, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0xfa, 0x9d, 0x00,
0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x9f, 0xb6, 0x03, 0x00, 0x17, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x9e, 0x00,
0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x18, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0xcf, 0x74, 0x00,
0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x1a, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x7d, 0x40, 0x00,
0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x1b, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0xa9, 0x00,
0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x1a, 0xd9, 0x03, 0x00, 0x1c, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x8f, 0xb6, 0x03,
0x00, 0x1c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0xde, 0x71, 0x01, 0x00 });*/
                        break;
                    
                    
                   
                   
                    
                    /*case 6925: // start
                        SendRaw(new byte[] {0x44, 0x46, 0x13, 0x00, 0x00, 0x00, 0x49, 0x1b,
0x01, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00 });
                        SendRaw(new byte[] { 0x44, 0x46, 0x25, 0x00, 0x00, 0x00, 0x6a, 0x1b,
0x00, 0x00, 0x23, 0x39, 0x39, 0x39, 0x39, 0x46,
0x46, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x46, 0x06,
0x02, 0x00, 0x00, 0x47, 0x1b, 0x00, 0x00, 0xa6,
0x01, 0xfd, 0x03, 0x00, 0x00, 0x00, 0x4e, 0x00,
0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0e,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x44, 0x4f, 0x4f, 0x46, 0x45, 0x4e, 0x2d,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x00, 0x33, 0x1a, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x73,
0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x30,
0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x37, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00,
0x00, 0x6d, 0x00, 0x00, 0x00, 0x30, 0x14, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9,
0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xce, 0x1a, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x14, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x23, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x4e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x48, 0x66, 0x00, 0x00, 0x00,
0x00, 0xb0, 0x8d, 0x00, 0x00, 0x00, 0x00, 0xd6,
0x8d, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x8d, 0x00,
0x00, 0x00, 0x00, 0xc8, 0x84, 0x00, 0x00, 0x00,
0x00, 0x01, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x44, 0x46, 0x04, 0x00, 0x00,
0x00, 0xdf, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x44,
0x46, 0x06, 0x00, 0x00, 0x00, 0x5e, 0x1b, 0x01,
0x00, 0xd3, 0x29, 0x03, 0x00 });
                        break;*/

                    case 7026: //IDK
                        SendRaw(new byte[] { 0x44, 0x46, 0x01, 0x00, 0x00, 0x00, 0xf2, 0x1a, 0x00 });
                        break;
                    case 7274: // data for practice score
                        /*SendRaw(new byte[] {0x44, 0x46, 0x66, 0x00, 0x00, 0x00, 0x6b, 0x1c,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x07, 0x05,
0x1f, 0x26, 0x4c, 0x41, 0x50, 0x44, 0x2d, 0x43,
0x63, 0x61, 0x6e, 0x64, 0x79, 0x00, 0xc6, 0x5c,
0x00, 0x00, 0x26, 0x4c, 0x41, 0x50, 0x44, 0x2d,
0x43, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x00, 0x5a,
0x61, 0x00, 0x00, 0x33, 0x57, 0x68, 0x65, 0x6e,
0x57, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x00,
0xcd, 0x6d, 0x00, 0x00, 0x33, 0x57, 0x68, 0x65,
0x6e, 0x57, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
0x00, 0x67, 0x71, 0x00, 0x00, 0x33, 0x57, 0x68,
0x65, 0x6e, 0x57, 0x65, 0x44, 0x69, 0x73, 0x63,
0x6f, 0x00, 0x43, 0x77, 0x00, 0x00});*/
                        break;
                    
                    case 7004: // 7004
                        //SendRaw(new byte[] {0x44, 0x46, 0x03, 0x00, 0x00, 0x00, 0x5d, 0x1b, 0x03, 0x00, 0x64});
                        SendRaw(new byte[] {0x44, 0x46, 0x1d, 0x00, 0x00, 0x00, 0x5d, 0x1b,
0xd1, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x46, 0x11,
0x00, 0x00, 0x00, 0x46, 0x1b, 0xd3, 0xca, 0x31,
0x35, 0x34, 0x2e, 0x33, 0x38, 0x2e, 0x31, 0x37,
0x39, 0x2e, 0x32, 0x33, 0x32, 0x00, 0x44, 0x46,
0x03, 0x00, 0x00, 0x00, 0x44, 0x1b, 0xa6, 0x01,
0x03});
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x73, 0x1b });
                        break;


                    case 7057: //Loading
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x92, 0x1b });
                        break;
                    case 7005: // rand
                        //SendRaw(new byte[] { 0x44, 0x46, 0x08, 0x00, 0x00, 0x00, 0x5d, 0x1b, 0x01, 0x04, 0x00, 0x01, 0x02, 0x1a, 0x33, 0x00 });
                        break;
                    case 6931: // exit i think
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x1a });
                        SendRaw(new byte[] { 0x44, 0x46, 0x64, 0x00, 0x00, 0x00, 0x64, 0x1c,
0x5b, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43,
0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5d, 0x20, 0x3a,
0x20, 0x44, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20,
0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x75,
0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73,
0x3f, 0x20, 0x53, 0x68, 0x6f, 0x77, 0x20, 0x65,
0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x69, 0x6e,
0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x6f,
0x6e, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f,
0x77, 0x20, 0x75, 0x73, 0x20, 0x79, 0x6f, 0x75,
0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x68,
0x65, 0x6d, 0x21, 0x00 });
                        break;
                    case 7307: // 
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x90, 0x1b,
0x44, 0x46, 0x0a, 0x01, 0x00, 0x00, 0xf8, 0x1a,
0x06, 0x00, 0x00, 0x06, 0x00, 0xbe, 0x01, 0x44,
0x6f, 0x6f, 0x46, 0x75, 0x73, 0x00, 0x00, 0x03,
0x00, 0x00, 0x00, 0x49, 0x44, 0x45, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x70,
0x72, 0x6f, 0x64, 0x69, 0x67, 0x79, 0xa2, 0xe7,
0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x4d, 0x79,
0x73, 0x74, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xc4, 0x01, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0xa2,
0xe7, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x4d,
0x79, 0x73, 0x74, 0x00, 0x39, 0x27, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x4a, 0x04, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xc6, 0x01, 0x70, 0x30, 0x72, 0x73, 0x79,
0x61, 0x00, 0x23, 0x45, 0x44, 0x31, 0x42, 0x32,
0x33, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x63,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x4e, 0x47,
0x78, 0x41, 0x4f, 0x41, 0x6e, 0x67, 0x65, 0x6c,
0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x6e, 0x65,
0x77, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
0x00, 0x3d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x2f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x01,
0x44, 0x4f, 0x4f, 0x46, 0x45, 0x4e, 0x2d, 0x00,
0x23, 0x39, 0x39, 0x39, 0x39, 0x46, 0x46, 0x00,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x44, 0x46, 0x45, 0x00, 0x00, 0x00,
0xe6, 0x1a, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x47, 0x65, 0x74, 0x20,
0x69, 0x6e, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20,
0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x21,
0x00, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0xc2, 0xae,
0x00, 0x00, 0x03, 0x10, 0x00, 0x02, 0x01, 0x00,
0x39, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x44,
0x46, 0x03, 0x00, 0x00, 0x00, 0xfc, 0x1a, 0x03,
0x00, 0x00 });
                        SendRaw(new byte[] { 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x73, 0x1b });
                        break;
                    
                    case 330: // OnSFForcedLeaveRoomReq
                        break;
                    case 332: // OnSFInvitationReq
                        break;
                    case 334: // OnSFSaveGamePointInDBReq
                        break;
                    case 336: // OnSFSaveEquipDurationInDBReq

                        break;
                    case 338: // OnSFSaveClanPointReq
                        break;

                    

                    
                    case 1206:
                        //User::OnSFLeaveForceSettingReq(this, &packet);
                        SendRaw(new byte[] { 0x00, 0x00, 0x00, 0x00, 0xb7, 0x04  });
                        break;
                    
                    
                    
                    case 1212:
                        //User::OnSFRepairItemReq(this, &packet);
                        break;
                    case 1214: // OnSFCheckBalanceReq
                        //SendRaw(new byte[] { 0x04, 0x00, 0x00, 0x00, 0xbf, 0x04, 0x00, 0x00, 0x00, 0x00 });
                        break;
                    case 1216:
                        //User::OnSFBuyCashItemReq(this, &packet);
                        break;
                    case 1218:
                        //User::OnSFBuyDirectUseCashItemReq(this, &packet);
                        break;
                    case 1220:
                        //User::OnSFBuySPItemReq(this, &packet);
                        break;
                    case 1222:
                        //User::OnSFItemAttributeReq(this, &packet);
                        break;
                    case 1224:
                        //User::OnSFUserETCInfoReq(this, &packet);
                        break;
                    case 1230:
                        //User::OnSFSaveWebItemWareDataReq(this, &packet);
                        break;
                    
                   

                    case 8003: // load gift tab in inventory
                        
                        break;
                    /*case 8008: // OnSFGameGuardAuthReq
                        SendRaw(new byte[] { 0x02, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00 });
                        SendRaw(new byte[] { 0x8a, 0x00, 0x00, 0x00, 0x63, 0x02, 0x02, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        //SendRaw(new byte[] { 0x03, 0x00, 0x00, 0x00, 0x68, 0x02, 0x30, 0x00, 0x00 });
                        // // here the disconnect come or please try again
                        //SendRaw(new byte[] { 0x03, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00});
                        //SendRaw(new byte[] { 0x27, 0x00, 0x00, 0x00, 0xba, 0x0b, 0x04, 0x00, 0x23, 0x04, 0x00, 0x00, 0x20, 0x4e, 0x00, 0x00, 0x01, 0x24, 0x04, 0x00, 0x00, 0x20, 0x4e, 0x00, 0x00, 0x01, 0x25, 0x04, 0x00, 0x00, 0x20, 0x4e,0x00, 0x00, 0x01, 0x31, 0x04, 0x00, 0x00, 0x20,0x4e, 0x00, 0x00, 0x01, 0x00 });
                        //SendRaw(new byte[] { 0x04, 0x00, 0x00, 0x00, 0xcf, 0x04, 0x00, 0x00,0x00, 0x00 });

                        //SendRaw(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x69, 0x00 });
                        //SendRaw(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x69, 0x00 });
                        SendRaw(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        
                        break;*/
                }


               

            }
            catch (Exception e)
            {
                LogFactory.GetLog(server.Name).LogFatal(e);
            }

            base.OnRun(packet);
        }

        protected override void HandlePacket(Packet packet)
        {


            base.HandlePacket(packet);
        }

        public override void OnFinishPacketSent(Packet packet)
        {
            
            base.OnFinishPacketSent(packet);
        }

        public User User => _user;

    }
}